package topicwise.practice.backtracking;

public class MedianOfSortedArr {

	
	public static void main(String[] args) {
		
		System.out.println(findMedianSortedArrays(new int[] {1,2}, new int[] {3,4})); 
		
	}
	public static double findMedianSortedArrays(int[] nums1, int[] nums2) {

		int len1 = nums1.length;
		int len2 = nums2.length;

		int half = (len1 + len2 + 1) / 2;
		int part1 = (len1 + 1) / 2 - 1;
		int part2 = half - part1 - 2;
		while ((part1 > 0 && part1 < nums1.length - 1 && part2 > 0 && part2 < nums2.length - 1)
				&& !((nums1[part1] < nums2[part2 + 1]) && nums2[part2] < nums1[part1 + 1])) {
			if (nums1[part1] > nums2[part2]) {
				part1--;
				part2++;
			} else if (nums1[part1 + 1] < nums2[part2 + 1]) {
				part1++;
				part2--;
			}
		}
		double num11 = Integer.MIN_VALUE;
		double num21 = Integer.MIN_VALUE;
		double num12 = Integer.MAX_VALUE;
		double num22 = Integer.MAX_VALUE;
		if (part1 > 0 && part1 < nums1.length) {
			num11 = nums1[part1];
		}
		if (part1 > 1 && part1 < nums1.length - 1) {
			num12 = nums1[part1 + 1];
		}
		if (part2 > 0 && part2 < nums2.length) {
			num21 = nums2[part2];
		}
		if (part2 > 0 && part2 < nums2.length - 1) {
			num22 = nums2[part2 + 1];
		}
		double max = Math.max(num11, num21);
		double min = Math.min(num12, num22);
		return (min + max) / 2;

	}

}
