package algorithms.graphs;

import java.util.*;
import java.util.Map.Entry;

import jdk.nashorn.internal.runtime.FindProperty;

public class WeightedGraph {

	public int verticesCount;
	public int edgesCount;
	public HashMap<Integer,HashSet<Edge>> map;
	
	public WeightedGraph() {
		verticesCount = 0;
		edgesCount = 0;
		map = new HashMap<Integer, HashSet<Edge>>();
	}
	
	public void insertVertex(int ver) {
		if(!map.containsKey(ver)) {
			map.put(ver, new HashSet<Edge>());
			verticesCount++;
		}
	}
	
	public void insertEdge(int src,int dest,int weight) {
		
		if(!map.containsKey(src)) {
			map.put(src, new HashSet<Edge>());
			verticesCount++;
		}
		if(!map.containsKey(dest)) {
			map.put(dest, new HashSet<Edge>());
			verticesCount++;
		}
		HashSet<Edge> srcSet = map.get(src);
		HashSet<Edge> destSet = map.get(dest);
		Edge edge = new Edge(src,dest,weight);
		if(!srcSet.contains(edge) && !destSet.contains(edge)) {
		  srcSet.add(edge);
		  destSet.add(edge);
		  map.put(src, srcSet);
		  map.put(dest, destSet);
		}
		
		edgesCount++;
		
	}
    
	public void removeEdge(Edge edge) {
		int src = edge.src;
		int dest = edge.dest;
		if(map.containsKey(src) && map.containsKey(dest)) {
			HashSet<Edge> set = map.get(src);
			set.remove(edge);
			map.put(src,set);
			set = map.get(dest);
			set.remove(edge);
			map.put(dest,set);
			edgesCount--;
			edgesCount--;
		}
	}
	
	public static void main(String[] args) {
		
		WeightedGraph g = new WeightedGraph();
		g.insertEdge(3, 4, 0);
		g.insertEdge(0, 1, 0);
		g.insertEdge(0, 2, 0);
		g.insertEdge(1, 3, 0);
		g.insertEdge(1, 4, 0);
		//g.insertEdge(3, 4, 0);
		boolean res = detectCycleUnionFind(g);
		System.out.println(res);
		
		
	}
	
   public static void krushkalAlgoMinSpanningTree(WeightedGraph g) {
	   
	   HashMap<Integer,HashSet<Edge>> map = g.map;
	   removeLoops(g);
	   ArrayList<Edge> list = new ArrayList<Edge>();
	   for(Integer ver : map.keySet()) {
		    for(Edge edge : map.get(ver)) {
		    	list.add(edge);
		    }
	   }
	   ArrayList<Edge> spanningTree = new ArrayList<Edge>();
	   Collections.sort(list);
	   int vertices = map.keySet().size();
	   int count = 0;
	   while(count<(vertices-1)) {
		   if(spanningTree.keySet().size()==0) {
			   spanningTree.put();
		   }
	   }
	   
   }

	
	public static void removeLoops(WeightedGraph g) {
		HashMap<Integer,HashSet<Edge>> map = g.map;
		HashSet<Edge> visitedEdges = new HashSet<>();
		Iterator<Entry<Integer, HashSet<Edge>>> itMap = map.entrySet().iterator();
		while(itMap.hasNext()) {
			Map.Entry<Integer, HashSet<Edge>> pair = itMap.next();
			Iterator<Edge> iterator = pair.getValue().iterator();
			while(iterator.hasNext()) {
		         Edge edge = iterator.next();
		         if(!visitedEdges.contains(edge)) {
		             visitedEdges.add(edge);  
		             if(edge.src==edge.dest) {
		        	   iterator.remove();
		             }
		           
				}
		    }
		}
		
		
	}
	
	

	public static boolean detectCycleUnionFind(WeightedGraph graph) {
		
		HashMap<Integer,HashSet<Edge>> map = graph.map;
		HashSet<Edge> visitedEdges = new HashSet<>();
		HashMap<Integer,Integer> parentMap = new HashMap<>();
		for(Integer ver : map.keySet()) {
		   parentMap.put(ver,-1);
		}
		for(Integer ver : map.keySet()) {
		    for(Edge edge : map.get(ver)) {
		    	if(!visitedEdges.contains(edge)) {
		    	  visitedEdges.add(edge);
                  System.out.println(parentMap.toString());
		    	  int x = find(edge.src,parentMap);
		    	  System.out.println("parent of " + edge.src + " :" + x);
		    	  int y = find(edge.dest,parentMap);
		    	  System.out.println("parent of " + edge.dest + " :" + y);
		       	  if(x == y) {
		       		  return true;
		       	  } else {
		       		  union(x,y,parentMap);
		       	  }
		    	}
		       	
		    }
		}
		return false;
	}

	private static void union(int x, int y, HashMap<Integer, Integer> parentMap) {
		
		  parentMap.put(x,y);
		
	}

	private static int find(int ver, HashMap<Integer, Integer> parentMap) {
		while(parentMap.get(ver)!=-1) {
			ver = parentMap.get(ver);
		}
		return ver;
	}
	
	
	
	
	
}
