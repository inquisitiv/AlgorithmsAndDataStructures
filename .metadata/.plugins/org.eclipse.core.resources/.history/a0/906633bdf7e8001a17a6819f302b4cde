package test;

public class Interview {

	  // Add any helper functions you may need here
	  static char rotatedChar(char c, int k) {
		  
	    int asciiValue = c;
	    if (Character.isDigit(c)) {
	      asciiValue = (asciiValue+k-48)%26+48;
	    } else if (asciiValue>=65 && asciiValue<=90) {
	    	asciiValue = (asciiValue+k-65)%26+65;
	    } else if (asciiValue>=97 && asciiValue<=122) {
	    	asciiValue = (asciiValue+k-97)%26+97;
	    }
	    
	    return (char)asciiValue;
	  }
	  static char derotatedChar(char c, int k) {
		  
		    int asciiValue = c;
		    if (Character.isDigit(c)) {
		      asciiValue = (asciiValue-k-48)%26+48;
		    } else if (asciiValue>=65 && asciiValue<=90) {
		    	asciiValue = (asciiValue-k-65)%26+65;
		    } else if (asciiValue>=97 && asciiValue<=122) {
		    	asciiValue = (asciiValue-k-97)%26+97;
		    }
		    
		    return (char)asciiValue;
		  }

	  static String rotationalCipher(String input, int rotationFactor) {
	    // Write your code here
	    StringBuilder str = new StringBuilder();
	    for(int i=0; i<input.length(); i++) {
	        char c = input.charAt(i); 
	        str.append(rotatedChar(c,rotationFactor));
	    }
	    
	    return str.toString();
	  }
	  
	  static String derotationalCipher(String input, int rotationFactor) {
		    // Write your code here
		    StringBuilder str = new StringBuilder();
		    for(int i=0; i<input.length(); i++) {
		        char c = input.charAt(i); 
		        str.append(derotatedChar(c,rotationFactor));
		    }
		    
		    return str.toString();
		  }

      public static void main(String[] args) {
		 
    	  System.out.println(rotationalCipher("Y", 4));
    	  System.out.println(derotationalCipher("C", 4));
	 
      }


	
}
